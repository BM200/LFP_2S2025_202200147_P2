/**
 * Test completo del sistema con input.txt
 */

const fs = require('fs');
const path = require('path');

// Importar m√≥dulos
const AnalizadorLexico = require('./js/lexico/AnalizadorLexico.js');
const Parser = require('./js/sintactico/Parser.js');
const Traductor = require('./js/traductor/Traductor.js');

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë              TEST COMPLETO - JavaBridge                           ‚ïë');
console.log('‚ïë         Leyendo y procesando input.txt                            ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

// Leer input.txt
const inputPath = path.join(__dirname, 'input.txt');
const codigoJava = fs.readFileSync(inputPath, 'utf-8');

console.log('üìÑ C√≥digo Java le√≠do:\n');
console.log('‚îÄ'.repeat(70));
console.log(codigoJava);
console.log('‚îÄ'.repeat(70));
console.log(`\nüìä Total de caracteres: ${codigoJava.length}\n`);

// FASE 1: An√°lisis L√©xico
console.log('‚ïê'.repeat(70));
console.log('  FASE 1: AN√ÅLISIS L√âXICO');
console.log('‚ïê'.repeat(70));

const lexico = new AnalizadorLexico(codigoJava);
const resultadoLexico = lexico.analizar();

console.log(`‚úì Tokens encontrados: ${resultadoLexico.tokens.length}`);
console.log(`‚úì Errores l√©xicos: ${resultadoLexico.errores.length}\n`);

if (resultadoLexico.errores.length > 0) {
    console.log('‚ö†Ô∏è  ERRORES L√âXICOS:\n');
    resultadoLexico.errores.forEach((error, i) => {
        console.log(`  ${i + 1}. L√≠nea ${error.linea}, Col ${error.columna}: ${error.mensaje}`);
    });
    console.log();
}

// Mostrar primeros 20 tokens
console.log('üìã Primeros 20 tokens:\n');
resultadoLexico.tokens.slice(0, 20).forEach((token, i) => {
    console.log(`  ${String(i + 1).padStart(2, '0')}. ${token.tipo.padEnd(20)} "${token.lexema}" (L${token.linea}:C${token.columna})`);
});
if (resultadoLexico.tokens.length > 20) {
    console.log(`  ... y ${resultadoLexico.tokens.length - 20} tokens m√°s\n`);
}

// FASE 2: An√°lisis Sint√°ctico
console.log('\n' + '‚ïê'.repeat(70));
console.log('  FASE 2: AN√ÅLISIS SINT√ÅCTICO');
console.log('‚ïê'.repeat(70));

const parser = new Parser(resultadoLexico.tokens);
const resultadoParser = parser.parse();

console.log(`‚úì An√°lisis ${resultadoParser.exito ? 'EXITOSO' : 'CON ERRORES'}`);
console.log(`‚úì Errores sint√°cticos: ${resultadoParser.errores.length}\n`);

if (resultadoParser.errores.length > 0) {
    console.log('‚ö†Ô∏è  ERRORES SINT√ÅCTICOS:\n');
    resultadoParser.errores.forEach((error, i) => {
        console.log(`  ${i + 1}. L√≠nea ${error.linea}, Col ${error.columna}: ${error.mensaje}`);
    });
    console.log();
}

// Mostrar tabla de s√≠mbolos
if (resultadoParser.tablaSimbolos) {
    const variables = resultadoParser.tablaSimbolos.obtenerSimbolos();
    console.log('üìä Tabla de S√≠mbolos:\n');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Variable       ‚îÇ Tipo     ‚îÇ Usado    ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    variables.slice(0, 10).forEach(v => {
        console.log(`‚îÇ ${v.nombre.padEnd(14)} ‚îÇ ${v.tipo.padEnd(8)} ‚îÇ ${v.usado ? '‚úì' : '-'}        ‚îÇ`);
    });
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    if (variables.length > 10) {
        console.log(`... y ${variables.length - 10} variables m√°s\n`);
    }
}

// FASE 3: Traducci√≥n a Python
if (resultadoParser.exito && resultadoParser.ast) {
    console.log('\n' + '‚ïê'.repeat(70));
    console.log('  FASE 3: TRADUCCI√ìN A PYTHON');
    console.log('‚ïê'.repeat(70));

    const traductor = new Traductor(resultadoParser.ast);
    const resultadoTraduccion = traductor.traducir();
    const codigoPython = resultadoTraduccion.codigo;

    console.log('\nüêç C√≥digo Python generado:\n');
    console.log('‚îÄ'.repeat(70));
    console.log(codigoPython);
    console.log('‚îÄ'.repeat(70));
    
    if (resultadoTraduccion.errores.length > 0) {
        console.log('\n‚ö†Ô∏è  Advertencias de traducci√≥n:\n');
        resultadoTraduccion.errores.forEach((error, i) => {
            console.log(`  ${i + 1}. ${error.tipo}: ${error.mensaje}`);
        });
    }

    // Guardar el resultado
    const outputPath = path.join(__dirname, 'output.py');
    fs.writeFileSync(outputPath, codigoPython, 'utf-8');
    console.log(`\n‚úì C√≥digo Python guardado en: ${outputPath}\n`);
}

// RESUMEN FINAL
console.log('\n' + '‚ïê'.repeat(70));
console.log('  RESUMEN FINAL');
console.log('‚ïê'.repeat(70));

console.log(`‚úì Tokens: ${resultadoLexico.tokens.length}`);
console.log(`‚úì Errores l√©xicos: ${resultadoLexico.errores.length}`);
console.log(`‚úì Errores sint√°cticos: ${resultadoParser.errores.length}`);
console.log(`‚úì Estado: ${(resultadoLexico.errores.length === 0 && resultadoParser.errores.length === 0) ? '‚úÖ √âXITO TOTAL' : '‚ö†Ô∏è  CON ERRORES'}\n`);
